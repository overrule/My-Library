template<typename T, typename F>
struct persistent_segment_tree{
    struct node{
        T data;
        int l, r;
    };
    int n;
    vector<node> nodes;
    vector<int> roots;
    F op;
    T e;
    persistent_segment_tree(int _n, F _op, T _e) : n(_n), op(_op), e(_e){
        roots.push_back(_build(0, n, [&](int index){
            return e;
        }));
    }
    template<typename T_der>
    persistent_segment_tree(vector<T_der> &a, F _op, T _e) : n(a.size()), op(_op), e(_e){
        roots.push_back(_build(0, n, [&](int index){
            return T(a[index]);
        }));        
    }
    T query(int l, int r, int t){
        _ql = l; _qr = r + 1;
        return _query(roots[t], 0, n);
    }
    void set(int index, T val, int root_id = -1){
        _index = index;
        if(root_id == -1) root_id += roots.size();
        assert(roots[root_id] != -1);
        roots.push_back(_update(roots[root_id], 0, n, [&](T &x){
            x = val;
        }));
    }
    void increment(int index, T val, int root_id = -1){
        _index = index;
        assert(0 <= _index && _index < n);
        if(root_id == -1) root_id += roots.size();
        assert(roots[root_id] != -1);
        roots.push_back(_update(roots[root_id], 0, n, [&](T &x){
            x = op(x, val);
        }));
    }
    pair<T, int> prefix_search(auto&& f, int time, int start_index = 0){
        return _prefix_search(f, start_index, e, roots[time], 0, n);
    }
    pair<T, int> _prefix_search(auto&& f, int start_index, T prefix_value, int node_id, int l, int r){
        if(r <= start_index) return pair(prefix_value, r);
        int mid = (l + r) / 2;
        if(l + 1 == r){
            return pair(op(prefix_value, nodes[node_id].data), r);
        }
        if(start_index <= l && f(op(prefix_value, nodes[node_id].data))){
            return pair(op(prefix_value, nodes[node_id].data), r);
        }
        auto [left_value, left_lim] = _prefix_search(f, start_index, prefix_value, nodes[node_id].l, l, mid);
        if(left_lim != mid) return pair(left_value, left_lim);
        if(!f(left_value)) return pair(left_value, left_lim);
        prefix_value = left_value;
        return _prefix_search(f, start_index, prefix_value, nodes[node_id].r, mid, r);

    }
    int time(){
        return roots.size() - 1;
    }
    private: 
    int _index;
    int _update(int node_id, int l, int r, auto&& apply){
        assert(l <= _index && _index < r);
        assert(node_id != -1);
        int new_node_id = nodes.size();
        nodes.push_back(nodes[node_id]);
        if(l + 1 == r){
            assert(l == _index);
            apply(nodes[new_node_id].data);
            return new_node_id;
        }
        int mid = (l + r) / 2;
        assert(nodes[new_node_id].l != -1);
        assert(nodes[new_node_id].r != -1);
        if(_index < mid){
            assert(l <= _index && _index < mid);
            nodes[new_node_id].l = _update(nodes[new_node_id].l, l, mid, apply);
        }
        else{
            assert(mid <= _index && _index < r);
            nodes[new_node_id].r = _update(nodes[new_node_id].r, mid, r, apply);
        }
        eval_node(new_node_id);
        return new_node_id;
    }
    int _ql, _qr;
    T _query(int node_id, int l, int r){
        if(node_id == -1) return e;
        if(_qr <= l || _ql >= r) return e;
        if(_ql <= l && r <= _qr) return nodes[node_id].data;
        int mid = (l + r) / 2;
        if(_ql >= mid) return _query(nodes[node_id].r, mid, r);
        if(_qr <= mid) return _query(nodes[node_id].l, l, mid);
        return op(_query(nodes[node_id].l, l, mid), _query(nodes[node_id].r, mid, r));
    }
    void eval_node(int node_id){
        int l = nodes[node_id].l, r = nodes[node_id].r;
        if(l != -1) nodes[node_id].data = nodes[l].data;
        if(r != -1) nodes[node_id].data = op(nodes[node_id].data, nodes[r].data);
    }
    int _build(int l, int r, auto&& index_val){
       if(l == r) return -1;
       int node_id = nodes.size();
       nodes.push_back({e, -1, -1});
       if(l + 1 == r){
           nodes[node_id].data = index_val(l);
           return node_id;
       }
       int mid = (l + r) / 2;
       nodes[node_id].l = _build(l, mid, index_val);
       nodes[node_id].r = _build(mid, r, index_val);
       eval_node(node_id);
       assert(nodes[node_id].l != -1);
       assert(nodes[node_id].r != -1);
       return node_id;
    }
};
